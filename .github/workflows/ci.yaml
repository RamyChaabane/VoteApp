name: CI pipeline

on:
  push:

jobs:
  # -------------------------------------
  test:
    name: Unit Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Install dependencies
        run: |
          cd backend
          go mod download

      - name: Run unit tests
        run: |
          cd backend
          go test -v ./... -race -coverprofile=coverage.out -covermode=atomic

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.out
          retention-days: 1

  # -------------------------------------
  build:
    name: Build app images
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version_tag: ${{ steps.set_version.outputs.version_tag }}
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set date tag
        id: set_date
        run: echo "date_tag=$(date -u +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - name: Set version tag
        id: set_version
        run: |
          version_tag="${{ steps.set_date.outputs.date_tag }}.${{ github.run_id }}"
          echo "version_tag=$version_tag" >> $GITHUB_OUTPUT

      - name: Build ${{ matrix.service }} image (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: false
          tags: |
            ramydockerid/vote-${{ matrix.service }}:${{ steps.set_version.outputs.version_tag }}
          outputs: type=docker,dest=${{ matrix.service }}-image.tar

      - name: Upload image tar
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-image
          path: ${{ matrix.service }}-image.tar
          retention-days: 1

  # -------------------------------------
  push:
    name: Push Backend Image
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service: [backend, frontend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download image tar
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-image

      - name: Load Docker image
        run: docker load --input ${{ matrix.service }}-image.tar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push ${{ matrix.service }} image
        run: |
          # Recreate the same tag from build job output
          version_tag="${{ needs.build.outputs.version_tag }}"
          docker push ramydockerid/vote-${{ matrix.service }}:$version_tag


  #--------------------------------------
  release:
    name: Release and notify Renovate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: push
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Renovate on argocd-voteapp repository
        run: |
          version_tag="${{ needs.build.outputs.version_tag }}"
          curl  -X POST \
            -o /dev/null -s -w "%{http_code}\n" \
            -H "Authorization: token ${{ secrets.TRIGGER_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/RamyChaabane/argocd-voteapp/dispatches \
            -d '{
                  "event_type":"trigger-renovate"
                  "client_payload": {
                    "version": "$version_tag"
                  },
               }'



  #--------------------------------------
  wait-for-dev-merge:
    needs: release
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.TRIGGER_PAT }}
      REPO: ${{ github.repository }}
    steps:
      - name: Wait for Renovate PR to auto-merge into dev
        run: |
          version_tag="${{ needs.build.outputs.version_tag }}"
          for i in {1..60}; do
              PR_ID=$(gh pr list \
                --repo https://github.com/"$REPO" \
                --label "env::dev" \
                --json number,title \
                --jq '.[] | select(.title | test("^chore\\(deps\\): .* $version_tag")) | .number')
          
              if [ -n "$PR_ID" ]; then
                echo "No merged PR yet. Retrying in 5 seconds..."
                sleep 10
              else
                echo "Found merged Renovate PR"
                exit 0
              fi
          done

          echo "Timeout: PR was not merged after waiting."
          exit 1

  #--------------------------------------
  run-e2e:
    name: e2e test
    runs-on: ubuntu-latest
    needs: wait-for-dev-merge

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: run e2e test with curl
        run: |
          echo "‚úÖ Test 1: Valid vote - Cats"
          curl -s -o /dev/null -w "%{http_code}" -X POST "https://voteapp.dev.rch.domain-buy-5.com/vote?vote=Cats" | grep -q 200 || exit 1

          echo "‚úÖ Test 2: Valid vote - Dogs"
          curl -s -o /dev/null -w "%{http_code}" -X POST "https://voteapp.dev.rch.domain-buy-5.com/vote?vote=Dogs" | grep -q 200 || exit 1

          echo "‚ùå Test 3: Invalid vote - Cat (typo)"
          curl -s -o /dev/null -w "%{http_code}" -X POST "https://voteapp.dev.rch.domain-buy-5.com/vote?vote=Cat" | grep -q 400 || exit 1

          echo "‚ùå Test 4: Invalid vote - Unicorn"
          curl -s -o /dev/null -w "%{http_code}" -X POST "https://voteapp.dev.rch.domain-buy-5.com/vote?vote=Unicorn" | grep -q 400 || exit 1

          echo "‚ùå Test 5: No vote param"
          curl -s -o /dev/null -w "%{http_code}" -X POST "https://voteapp.dev.rch.domain-buy-5.com/vote" | grep -q 400 || exit 1

          echo "üéâ All E2E tests passed!"
