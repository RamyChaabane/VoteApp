name: CI pipeline

on:
  push:

jobs:
  # -------------------------------------
  test:
    name: Unit Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd backend
          go mod download

      - name: Run unit tests
        run: |
          cd backend
          go test -v ./... -race -coverprofile=coverage.out -covermode=atomic

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.out

  # -------------------------------------
  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Git commit short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build backend image (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: |
            ramydockerid/vote-backend:latest
            ramydockerid/vote-backend:sha-${{ steps.vars.outputs.sha_short }}
            ramydockerid/vote-backend:ts-${{ github.run_id }}
          outputs: type=docker,dest=backend-image.tar

      - name: Upload image tar
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image.tar

  build-frontend:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Git commit short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build frontend image (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: |
            ramydockerid/vote-frontend:latest
            ramydockerid/vote-frontend:sha-${{ steps.vars.outputs.sha_short }}
            ramydockerid/vote-frontend:ts-${{ github.run_id }}
          outputs: type=docker,dest=frontend-image.tar

      - name: Upload image tar
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: frontend-image.tar

  # -------------------------------------
  push-backend:
    name: Push Backend Image
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download image tar
        uses: actions/download-artifact@v4
        with:
          name: backend-image

      - name: Load Docker image
        run: docker load --input backend-image.tar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push backend image
        run: |
          docker push ramydockerid/vote-backend:latest
          docker push ramydockerid/vote-backend:sha-${{ needs.build-backend.outputs.sha_short }}
          docker push ramydockerid/vote-backend:ts-${{ github.run_id }}

  push-frontend:
    name: Push Frontend Image
    runs-on: ubuntu-latest
    needs: build-frontend
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download image tar
        uses: actions/download-artifact@v4
        with:
          name: frontend-image

      - name: Load Docker image
        run: docker load --input frontend-image.tar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push frontend image
        run: |
          docker push ramydockerid/vote-frontend:latest
          docker push ramydockerid/vote-frontend:sha-${{ needs.build-backend.outputs.sha_short }}
          docker push ramydockerid/vote-frontend:ts-${{ github.run_id }}
