name: CI pipeline

on:
  pull_request:
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/ci.yaml'

  push:
    branches: [ main ]

jobs:
  # -------------------------------------
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install kubeconform
        run: |
          curl -sSL https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar -xz -C /usr/local/bin kubeconform
          chmod +x /usr/local/bin/kubeconform

      - name: Install yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint

      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Lint YAML files
        run: |
          yamllint k8s/

      - name: Validate kustomization overlays
        run: |
          kustomize build k8s/overlays/dev | kubeconform -strict -summary


  # -------------------------------------
  test:
    name: Unit Test Backend
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd backend
          go mod download

      - name: Run unit tests
        run: |
          cd backend
          go test -v ./... -race -coverprofile=coverage.out -covermode=atomic

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.out

  # -------------------------------------
  build-backend:
    name: Build & Push Backend Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Git commit short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ramydockerid/vote-backend:latest
            ramydockerid/vote-backend:sha-${{ steps.vars.outputs.sha_short }}
            ramydockerid/vote-backend:ts-${{ github.run_id }}


  build-frontend:
    name: Build & Push Frontend Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Git commit short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ramydockerid/vote-frontend:latest
            ramydockerid/vote-frontend:sha-${{ steps.vars.outputs.sha_short }}
            ramydockerid/vote-frontend:ts-${{ github.run_id }}


  # --------------------------------------
  e2e:
    name: e2e test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
     - build-backend
     - build-frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: vote-ci
          version: v0.22.0
          node_image: kindest/node:v1.30.0
          wait: 60s

      - name: Install kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install kustomize
        run: |
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash
          chmod +x kustomize
          sudo mv kustomize /usr/local/bin/

      - name: Deploy to Kind using kustomize
        run: |
          kubectl create ns vote-dev
          kustomize build k8s/overlays/dev | kubectl apply -f -

      - name: Wait for rollout
        run: |
          kubectl config set-context --current --namespace=vote-dev
          kubectl rollout status deployment/frontend --timeout=60s
          kubectl rollout status deployment/backend --timeout=60s

      - name: Port-forward frontend and test with curl
        run: |
          kubectl config set-context --current --namespace=vote-dev
          kubectl port-forward svc/frontend 8881 &
          sleep 5
          echo "‚úÖ Test 1: Valid vote - Cats"
          curl -s -o /dev/null -w "%{http_code}" -X POST "http://localhost:8881/vote?vote=Cats" | grep -q 200 || exit 1
      
          echo "‚úÖ Test 2: Valid vote - Dogs"
          curl -s -o /dev/null -w "%{http_code}" -X POST "http://localhost:8881/vote?vote=Dogs" | grep -q 200 || exit 1
      
          echo "‚ùå Test 3: Invalid vote - Cat (typo)"
          curl -s -o /dev/null -w "%{http_code}" -X POST "http://localhost:8881/vote?vote=Cat" | grep -q 400 || exit 1
      
          echo "‚ùå Test 4: Invalid vote - Unicorn"
          curl -s -o /dev/null -w "%{http_code}" -X POST "http://localhost:8881/vote?vote=Unicorn" | grep -q 400 || exit 1
      
          echo "‚ùå Test 5: No vote param"
          curl -s -o /dev/null -w "%{http_code}" -X POST "http://localhost:8881/vote" | grep -q 400 || exit 1
      
          echo "üéâ All E2E tests passed!"
