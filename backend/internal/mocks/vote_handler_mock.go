// Code generated by MockGen. DO NOT EDIT.
// Source: ./vote_handler.go
//
// Generated by this command:
//
//	mockgen -source=./vote_handler.go -destination=../mocks/vote_handler_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVoteInterface is a mock of VoteInterface interface.
type MockVoteInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVoteInterfaceMockRecorder
	isgomock struct{}
}

// MockVoteInterfaceMockRecorder is the mock recorder for MockVoteInterface.
type MockVoteInterfaceMockRecorder struct {
	mock *MockVoteInterface
}

// NewMockVoteInterface creates a new mock instance.
func NewMockVoteInterface(ctrl *gomock.Controller) *MockVoteInterface {
	mock := &MockVoteInterface{ctrl: ctrl}
	mock.recorder = &MockVoteInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteInterface) EXPECT() *MockVoteInterfaceMockRecorder {
	return m.recorder
}

// ServeHTTP mocks base method.
func (m *MockVoteInterface) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", w, r)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockVoteInterfaceMockRecorder) ServeHTTP(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockVoteInterface)(nil).ServeHTTP), w, r)
}
